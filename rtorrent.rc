# This is an example resource file for rTorrent. Copy to
# ~/.rtorrent.rc and enable/modify the options as needed. Remember to
# uncomment the options you wish to enable.

#### just setting what is required for first boot attempt of rutorrent
scgi_local = ./rutorrent-share/rpc.socket

# Maximum and minimum number of peers to connect to per torrent.
#min_peers = 40
#max_peers = 100

# Same as above but for seeding completed torrents (-1 = same as downloading)
#min_peers_seed = 10
#max_peers_seed = 50

# Maximum number of simultanious uploads per torrent.
#max_uploads = 15

# Global upload and download rate in KiB. "0" for unlimited.
#download_rate = 0
#upload_rate = 0

# Default directory to save the downloaded torrents.
directory = /torrents/downloading

# I've learned the syntax here through some hard trial and error
# - to get the value of a property, `$command=`
# - to set the value of a property, $command.get=<new value>
# lists are seperated with ,
# we are binding an event handler
#  arg0: event.download.finished - the event name
#  arg1: move_complete - this is some user-defined handler name, could be anything
#  arg2: a string that will be eval()'d when this event occurs
# what the handler script does
#  - set the `d.directory` property to /torrents/seeding, which updates where
#    rtorrent will look for the evented torrent's files. here `d` is the download
#    object
#  - execute `mv <path to download> /torrents/seeding` as a system command
#  - execute `rtorrent-postprocess <new path to download> <torrent name> <some
#    tag?> v3` as a system command
# I would expect $d.base_path to be the right location, but $d.directory works instead.
method.set_key = event.download.finished,move_complete,"d.directory.set=/torrents/seeding;execute=mv,$d.base_path=,/torrents/seeding;execute=rtorrent-postprocess,$d.directory=,$d.name=,$d.custom1=,v3"

# Default session directory. Make sure you don't run multiple instance
# of rtorrent using the same session directory. Perhaps using a
# relative path?
session = ./rutorrent-share/session

# Watch a directory for new torrents, and stop those that have been
# deleted.
#schedule = watch_directory,5,5,load_start=./watch/*.torrent
#schedule = untied_directory,5,5,stop_untied=

# Close torrents when diskspace is low.
#schedule = low_diskspace,5,60,close_low_diskspace=100M

# The ip address reported to the tracker.
#ip = 127.0.0.1
#ip = rakshasa.no

# The ip address the listening socket and outgoing connections is
# bound to.
#bind = 127.0.0.1
#bind = rakshasa.no

# Port range to use for listening.
#port_range = 6890-6999

# Start opening ports at a random position within the port range.
#port_random = no

# Check hash for finished torrents. Might be usefull until the bug is
# fixed that causes lack of diskspace not to be properly reported.
#check_hash = no

# Set whether the client should try to connect to UDP trackers.
#use_udp_trackers = yes

# Alternative calls to bind and ip that should handle dynamic ip's.
#schedule = ip_tick,0,1800,ip=rakshasa
#schedule = bind_tick,0,1800,bind=rakshasa

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
# encryption = allow_incoming,enable_retry,prefer_plaintext

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
#
# dht = auto

# UDP port to use for DHT.
#
# dht_port = 6881

# Enable peer exchange (for torrents not marked private)
#
peer_exchange = yes

# executes this hook script on rtorrent boot-up
execute = {rtorrent-started}
